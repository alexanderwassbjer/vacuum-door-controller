# Basic config #

# Enable Home Assistant API
api:

# Sensors for ESP version and WIFI information
text_sensor:
  # Installed version
  - platform: template
    name: "${friendly_name} - Installed version"
    id: glow_version
    icon: "mdi:label-outline"
    entity_category: diagnostic
    lambda: |-
      return {"${project_version}"};
    update_interval: 6h
  # ESPHome version
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} - ESPHome Version"
  # IP address and connected SSID
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} - IP Address"
      icon: mdi:wifi
    ssid:
      name: "${friendly_name} - Connected SSID"
      icon: mdi:wifi-strength-2

switch:
  - platform: gpio
    id: motor_in1
    pin: ${motor_in1_pin}
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: motor_in2
    pin: ${motor_in2_pin}
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: motor_enable
    pin: ${motor_enabled_pin}
    restore_mode: ALWAYS_ON

# Define script to control the door
script:
  - id: open_door
    then:
      - globals.set:
          id: door_state_open
          value: "true"
      - switch.turn_off: motor_in1
      - switch.turn_on: motor_in2
      - delay: !lambda "return id(open_delay).state * 1000;"
      - script.execute: stop_door

  - id: close_door
    then:
      - globals.set:
          id: door_state_open
          value: "false"
      - switch.turn_on: motor_in1
      - switch.turn_off: motor_in2
      - delay: !lambda "return id(close_delay).state * 1000;"
      - script.execute: stop_door

  - id: stop_door
    then:
      - switch.turn_off: motor_in1
      - switch.turn_off: motor_in2

globals:
  - id: door_state_open
    type: bool
    restore_value: yes
    initial_value: "false"

binary_sensor:
  - platform: template
    name: "${friendly_name} - Vacuum Door Status"
    id: door_open
    lambda: |-
      return id(door_state_open);

# Define actions to control the door
button:
  - platform: template
    name: "Open Vacuum Door"
    on_press:
      - if:
          condition:
            lambda: return !id(door_state_open);
          then:
            - script.execute: open_door
          else:
            - logger.log: "Door is already open"
    icon: "mdi:door-open"

  - platform: template
    name: "Close Vacuum Door"
    on_press:
      - if:
          condition:
            lambda: return id(door_state_open);
          then:
            - script.execute: close_door
          else:
            - logger.log: "Door is already closed"
    icon: "mdi:door-closed"

  - platform: template
    name: "Stop Vacuum Door"
    on_press:
      - script.execute: stop_door
    icon: "mdi:stop"

# Define number components for configuring delays
# This is based on a linear actuator which has a speed on 10mm/s.
number:
  - platform: template
    name: "${friendly_name} - Open Door Delay"
    id: open_delay
    min_value: 1
    max_value: 20
    step: 0.25
    unit_of_measurement: s
    optimistic: true
    initial_value: 14 # Default to 14 seconds

  - platform: template
    name: "${friendly_name} - Close Door Delay"
    id: close_delay
    min_value: 1
    max_value: 20
    step: 0.25
    unit_of_measurement: s
    optimistic: true
    initial_value: 16 # Default to 16 seconds
